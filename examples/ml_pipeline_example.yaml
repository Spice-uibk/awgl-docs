# This file contains an AWPL description for a workflow running in Kubernetes pods.
# 
# Workflow:
# 1. Fetch data and calculate an initial metric.
# 2. Loop: run preprocessing tasks until metric > 0.9.
# 3. Train a model using preprocessed data.
# 4. Fetch multiple test sets.
# 5. Map: evaluate the model on each in parallel.
# 6. Aggregate results and calculate average.
# 7. Branch: if average > 0.95 -> advanced task; else -> basic task.
# 8. Finalization step (cleanup, output).


name: "ml_pipeline_example"
runtime: "airflow"
config:
  resource_hints: []
  slo: []
  runtime: []
  schedule: "@daily"
  catchup: false
  default_args:
      owner: "airflow"
      retries: 3
      retry_delay: "1m"
      start_date: '2025-05-05'
      
    
nodes:
  - task:
      id: "fetch_data"
      description: "Fetches some data, calculates some metric and stores in xcom"
      task_config: {}  
      depends_on: []

  - loop:
      id: "preprocessing_loop"
      description: "Runs until some metric > 0.9"
      loop_data:
        id: "loop_identifier_1"
        init: "$fetch_data"
        loop: "$preprocessing"
      conditions:
        - lhs: "$loop_identifier_1.metric"
          rhs: "0.8"
          operator: "<"
      body:
        - task:
            id: "preprocessing"
            task_config: {}  
            depends_on: []
      depends_on: 
          - "fetch_data"

  - task:
      id: "train_model"
      description: "Trains model with preprocessed data"
      task_config: {}  
      depends_on: 
          - "preprocessing_loop"

  - task: 
      id: "fetch_test_sets"
      description: "Fetches multiple test sets"
      task_config: {}  
      depends_on: []

  - map: 
      id: "evaluation_map"
      description: "Evaluation trained model on test sets"
      body: 
          - task:
              id: "evaluate"
              task_config: {}  
              depends_on: []
      depends_on:
          - "train_model"
          - "fetch_test_sets"

  - task:
      id: "aggregate_results"
      description: "Aggregates results and calculates average"
      task_config: {} 
      depends_on:
          - "evaluation_map"

  - branch:
       id: "result_branch"
       description: "Chooses different path depending on average result"
       conditions:
          - lhs: "$aggregate_results.result"
            rhs: "0.86"
            operator: ">"
            negation: false
       branches:
          true:
              - task:
                  id: "advanced_task"
                  description: "Runs an advanced task"
                  task_config: {} 
                  depends_on: []
          false:
              - task:
                  id: "basic_task"
                  description: "Runs a basic task"
                  task_config: {} 
                  depends_on: []

       depends_on: 
          - "aggregate_results"

  - task:
      id: "finalize"
      description: "Some finalization steps, outputs result, cleans up"
      task_config: {} 
      depends_on:
          - "result_branch"
